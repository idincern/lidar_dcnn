* EECS 600 Project
** DONE Create Data
   CLOSED: [2016-12-09 Fri 16:43]
   - Rewrite a minimum stageros to move blocks around and scan them with lidar
*** DONE Load a world file with a robot with a lidar.
    CLOSED: [2016-12-05 Mon 15:08]
  + Create SubscribeModels()
*** DONE Access the lidar output, write it to file.
    CLOSED: [2016-12-06 Tue 15:45]
  + This should be done in WorldCallback(), I think.
  + [X] Access the lidar output.
  + [X] Write it to a .csv file.
*** DONE Add simple block model to the simulation.
    CLOSED: [2016-12-09 Fri 15:50]
    - [X] Load minimal block in the world file.
    - [ ] Alter verticies of block through a function that is a friend of Block
    - [ ] or create a block using the constructor method. Then get rid of it.
      - create a model.
      - create a blockgroup.
      - create a block with desired vertices.
      - remove the model.
        - void Ancestor::RemoveChild(Model* mod); or Add/RemoveModel(Model *mod);
*** DONE Read from A-Z.csv and load those blocks into simulation.
    CLOSED: [2016-12-09 Fri 15:51]
    - Acutally loaded models in worldfile
*** DONE Change angle, distance, rotation, size, and noise level or blocks
    CLOSED: [2016-12-09 Fri 15:51]
    - [X] angle
    - [X] distance
    - [X] rotation
    - [X] size
    - [ ] noise level (will do in post)
      - noise added to each vertex -- angle - uniform, radius -gaussian w/ std = noise level.
      - noise can instead be added to scans, instead of actual verticies.
*** DONE Cycle through
    CLOSED: [2016-12-09 Fri 15:52]
    + [X] block type (A-Z, shapes, etc.)
    + [X] angle
      - -90 on the +y-axis, 0 on the x-axis, 90 on the -y-axis
    + [X] distance (from lidar)
    + [X] rotation (angle with respect to angle above)
    + [X] size
      - 1 = text height of 1 m. Actual text is sometimes a bit larger.
    + [ ] noise level (will do in post)
      - angle - uniform(0,180), distance - normal(0,noise level)
*** DONE At each instance in the cycle above, record a scan
    CLOSED: [2016-12-07 Wed 20:56]
*** DONE Save data to a .csv or binary file
    CLOSED: [2016-12-13 Tue 10:42]
    + Data structure: block type, size, distance, angle, rotation, noise level, [scan]
    + [X] Make shape, angle, distance, rotation, size, and noise level all member variables
      - that way they can be written to file in WorldCallback()
    + [X] Save as numpy array for use with Tensorflow
      - >> operator only writes four decimal places to file.
      - numpy can give 16+ bit precision. However, larger file.
*** TODO Cleanup
    - [ ] Make .csv file name a parameter
*** TODO Make data sets (max range 50) [2/4]
    - [X] Structured, size 1-5, r 5-25
    - [X] Structured, size 10-20, r 15,35
    - [ ] Random, size 1-5, r 5-25
    - [ ] Random, size 10-20, r 15-35
*** TODO Add noise to data?
   This can be done in python.

** TODO Write TensorFlow DCNN
*** TODO Get a network running with ranges [3/6]
    - [-] Add (Leaky?) ReLU's and Batch Norm and/or Dropout [1/4]
      - [X] ReLU
      - [ ] Leaky?
      - [ ] Batch Norm [[http://bamos.github.io/2016/08/09/deep-completion/][see this]] 
      - [ ] Dropout
    - [X] Create loss function
    - [X] Create optimizer
    - [ ] normalize inputs ~N(0,1)
    - [X] Design architecture.
      - start with hyperlapse idea, but with 1D convolution.
      - used AlexNet with reduced dimensions. See hyperparameters [[file:~/ros_ws/src/lidar_dcnn/scripts/hyperlidar.py::#%20k_i%20=%20height%20of%201d%20convolution%20kernel%20in%20layer%20i][here]]
    - [ ] Loop through data [0/2]
      - [ ] figure out how to randomize data/targets for mini-batches
      - [ ] make targets into 1-hot vectors
*** TODO Figure out how to preprocess data
    - angles with first point being distance?

* Useful Commands
** -TODO items
M-shift-RET -- Make new TODO item
C-c C-t -- Mark TODO item as done with timestamp
** Expand/contract
shift-TAB -- cycle through heading expansion levels
** Links
[[url][description] -- add one more right bracket to make a link
ex: [[http://matthewkle.in/][My website!]]
C-c C-o -- open link
C-c l -- org-store-link
C-c C-l -- org-insert-link
ex: [[file:~/.emacs.d/init.el::(require%20'package)][My emacs init file.]]
** Checkboxes
C-c C-c -- toggle checkbox
